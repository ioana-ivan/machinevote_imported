{"remainingRequest":"/media/isabelle/WINDOWS/Users/Isabelle/Documents/Travail-college/Formation_universite_DU/Cours/Année 2019-2020/6_Projet_Mathematiques_Informatiques/Machine_vote/machine_vote_v0_1/node_modules/vue-loader/lib/index.js??vue-loader-options!/media/isabelle/WINDOWS/Users/Isabelle/Documents/Travail-college/Formation_universite_DU/Cours/Année 2019-2020/6_Projet_Mathematiques_Informatiques/Machine_vote/machine_vote_v0_1/src/components/EnregistrementVoteMachine.vue?vue&type=script&lang=js&","dependencies":[{"path":"/media/isabelle/WINDOWS/Users/Isabelle/Documents/Travail-college/Formation_universite_DU/Cours/Année 2019-2020/6_Projet_Mathematiques_Informatiques/Machine_vote/machine_vote_v0_1/src/components/EnregistrementVoteMachine.vue","mtime":1582275815703},{"path":"/media/isabelle/WINDOWS/Users/Isabelle/Documents/Travail-college/Formation_universite_DU/Cours/Année 2019-2020/6_Projet_Mathematiques_Informatiques/Machine_vote/machine_vote_v0_1/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/media/isabelle/WINDOWS/Users/Isabelle/Documents/Travail-college/Formation_universite_DU/Cours/Année 2019-2020/6_Projet_Mathematiques_Informatiques/Machine_vote/machine_vote_v0_1/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/media/isabelle/WINDOWS/Users/Isabelle/Documents/Travail-college/Formation_universite_DU/Cours/Année 2019-2020/6_Projet_Mathematiques_Informatiques/Machine_vote/machine_vote_v0_1/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/media/isabelle/WINDOWS/Users/Isabelle/Documents/Travail-college/Formation_universite_DU/Cours/Année 2019-2020/6_Projet_Mathematiques_Informatiques/Machine_vote/machine_vote_v0_1/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport axios from 'axios';\nimport ReponseEnregistrement from \"@/components/ReponseEnregistrement.vue\";\nexport default {\n  name: \"EnregistrementVoteMachine\",\n  components:{ReponseEnregistrement},\n  data() {\n    return {\n      nom: \"\",\n      prenom: \"\",\n      commune: \"\",\n      identite: \"\",\n      secu: \"\",\n      erreurDonnee: \"\"\n    };\n  },\n  \n  methods: {    \n    // crée la fiche de la personne et appelle le service web côté serveur -->\n    enregistrementVote:function() {\n      var personneEnregistreVote = {\n        nom: this.nom,\n        prenom: this.prenom,\n        commune: this.commune,\n        identite: this.identite,\n        secu: this.secu,\n      };\n      \n      // console.log('avant post');\n      //Call REST web service with fetch API\n      axios\n      .post('http://localhost:8082'+'/personneEnregistreVote', {personne: this.personneEnregistreVote})\n      // method: 'post',\n      // baseURL: 'http://localhost:8082'+ \"/personneEnregistreVote/\"+this.$route.params.pathurl,\n      // data: JSON.stringify(personneEnregistreVote),\n      // headers: {\n      //     'Content-Type': 'application/json'\n      // }\n      \n      .then(reponse => {\n      //On traite la suite une fois la réponse obtenue \n        if (reponse.status === 200) {\n          console.log(reponse);\n        } else if (reponse.status === 204) {\n          this.state = stateResult.ENREGISTREMENT_ERROR;\n          this.errorMessage = \"Personne non inscrite.\";\n        }\n      })\n      .catch(() => {\n        this.state = stateResult.ENREGISTREMENT_ERROR;\n        this.errorMessage = \"Problème d'enregistrement.\";\n      });\n      //On traite ici les erreurs éventuellement survenues\n\n      console.log('apres post');\n/*       this.$router.push({\n            name: \"ReponseEnregistrement\",\n            params: { pathurl: 123 }\n          }); */\n\n    },\n      // La fiche est créée si toutes les champs sont informés\n    enregistrementVoteAnnule() {\n    return (\n      this.nom === \"\" ||\n      this.prenom ===\"\" ||\n      this.commune === \"\"||\n      this.identite === \"\"||\n      this.secu === \"\"\n      );\n    },\n    \n   }\n}\n\n",{"version":3,"sources":["EnregistrementVoteMachine.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA","file":"EnregistrementVoteMachine.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div class=\"container\">\n    <!-- Titre + description -->\n      <h1>Machine de vote</h1>\n      <h2>Enregistrement</h2>\n\n    <!--Le nom, prénom et commune peuvent contenir que des lettres majuscules, minuscules, \n    espace ou guillemet simple de 3 à 24 caractères. -->\n    <h3>Nom :</h3>\n    <div class=\"row\">\n      <div class=\"col\">\n        <input \n          type=\"text\" \n          class=\"large-input mx-auto d-block\" \n          placeholder=\"Nom\"\n          v-model=\"nom\" \n          size=\"200\" \n          pattern=\"[A-z,' ', ''']{3,24}\"\n        >\n      </div>\n    </div>\n\n    <h3>Prénom :</h3>\n    <div class=\"row\">\n      <div class=\"col\">\n        <input \n          type=\"text\" \n          placeholder=\"Prénom\" \n          v-model=\"prenom\"\n          class=\"large-input mx-auto d-block\"\n          pattern=\"[A-z,' ', ''']{3,24}\"\n        >\n      </div>\n    </div>\n\n    <h3>Commune :</h3>\n    <div class=\"row\">\n      <div class=\"col\">\n        <input \n          type=\"text\" \n          placeholder=\"Commune\" \n          v-model=\"commune\"\n          class=\"large-input mx-auto d-block\"\n          pattern=\"[A-z,' ', ''']{3,24}\"\n        >\n      </div>\n    </div>   \n\n        <h3>Numéro de carte d'identité :</h3>\n        <center><h4>5 chiffres</h4></center>\n    <div class=\"row\">\n      <div class=\"col\">\n        <input \n          type=\"text\" \n          placeholder=\"CNI\" \n          v-model=\"identite\"\n          inputmode=\"numeric\" \n          minlength=\"5\"\n          maxlength=\"5\" \n          required autocomplete=\"off\"\n          class=\"large-input mx-auto d-block\"\n        >\n      </div>\n    </div>\n\n          <h3>Numéro de sécurité sociale  :</h3>\n          <center><h4>4 chiffres</h4></center>\n    <div class=\"row\">\n      <div class=\"col\">\n        <input \n          type=\"text\" \n          placeholder=\"sécurité sociale\" \n          v-model=\"secu\"\n          inputmode=\"numeric\" \n          minlength=\"4\"\n          maxlength=\"4\" \n          required autocomplete=\"off\"\n          class=\"large-input mx-auto d-block\"\n        >\n      </div>\n    </div>\n\n    <!-- VoteMachine option -->\n    <div class=\"row justify-content-center\"></div>\n\n    <!-- <div>\n        <button\n          type=\"button\"\n          v-on:click=\"resultatOK\"\n        >Enregistrement OK</button>\n    </div>\n\n    <div>\n        <button\n          type=\"button\"\n          v-on:click=\"resultatEchec\"\n        >Enregistrement Echec</button>\n    </div> -->\n\n    <!-- Button Action -->\n    <!-- Directive v-bind with isCreateVoteMachineDisabled() -->\n    <div class=\"row\">\n      <div class=\"col\">\n        <!-- Tant que les champs ne sont pas remplis, le bouton \"valider\" n'est pas actif -->\n        <!-- clic bouton : appeler méthode `enregistrementVote` -->\n        <button\n          type=\"button\"\n          class=\"validate-button btn-lg btn-primary mx-auto d-block\"\n          v-on:click=\"enregistrementVote\"\n          :disabled=\"enregistrementVoteAnnule()\"\n        >Valider</button>\n      </div>\n    </div>\n\n    <div class=\"alert alert-primary\" role=\"alert\">\n      <h4 class=\"alert-heading\">Footer : Test</h4>\n      <hr>\n      <p>\n        Nom:\n        <strong>\n          <!-- Mustache with question -->\n          <strong>{{ nom }}</strong>\n        </strong>\n      </p>\n      <!-- Mustache with computed property: listSize -->\n      <p>Trace: {{ this.nom+this.prenom }}</p>\n    </div>\n\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\nimport ReponseEnregistrement from \"@/components/ReponseEnregistrement.vue\";\nexport default {\n  name: \"EnregistrementVoteMachine\",\n  components:{ReponseEnregistrement},\n  data() {\n    return {\n      nom: \"\",\n      prenom: \"\",\n      commune: \"\",\n      identite: \"\",\n      secu: \"\",\n      erreurDonnee: \"\"\n    };\n  },\n  \n  methods: {    \n    // crée la fiche de la personne et appelle le service web côté serveur -->\n    enregistrementVote:function() {\n      var personneEnregistreVote = {\n        nom: this.nom,\n        prenom: this.prenom,\n        commune: this.commune,\n        identite: this.identite,\n        secu: this.secu,\n      };\n      \n      // console.log('avant post');\n      //Call REST web service with fetch API\n      axios\n      .post('http://localhost:8082'+'/personneEnregistreVote', {personne: this.personneEnregistreVote})\n      // method: 'post',\n      // baseURL: 'http://localhost:8082'+ \"/personneEnregistreVote/\"+this.$route.params.pathurl,\n      // data: JSON.stringify(personneEnregistreVote),\n      // headers: {\n      //     'Content-Type': 'application/json'\n      // }\n      \n      .then(reponse => {\n      //On traite la suite une fois la réponse obtenue \n        if (reponse.status === 200) {\n          console.log(reponse);\n        } else if (reponse.status === 204) {\n          this.state = stateResult.ENREGISTREMENT_ERROR;\n          this.errorMessage = \"Personne non inscrite.\";\n        }\n      })\n      .catch(() => {\n        this.state = stateResult.ENREGISTREMENT_ERROR;\n        this.errorMessage = \"Problème d'enregistrement.\";\n      });\n      //On traite ici les erreurs éventuellement survenues\n\n      console.log('apres post');\n/*       this.$router.push({\n            name: \"ReponseEnregistrement\",\n            params: { pathurl: 123 }\n          }); */\n\n    },\n      // La fiche est créée si toutes les champs sont informés\n    enregistrementVoteAnnule() {\n    return (\n      this.nom === \"\" ||\n      this.prenom ===\"\" ||\n      this.commune === \"\"||\n      this.identite === \"\"||\n      this.secu === \"\"\n      );\n    },\n    \n   }\n}\n\n</script>\n\n<style>\n\n.large-input {\n  box-sizing: border-box;\n  width: 500px;\n  max-width: 80%;\n  border-radius: 7px;\n  border: 1px solid #bdc3c7;\n  padding: 10px 20px;\n  outline: none;\n  text-align: center;\n  line-height: 30px;\n  font-size: 15px;\n  margin: 20px;\n  margin-top: 0;\n  font-size: 20px;\n}\n\n.clear-button {\n  margin-bottom: 25px;\n}\n\n.error-message {\n  font-size: 125%;\n  font-weight: bold;\n}\n</style>\n"]}]}